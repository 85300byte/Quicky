<<<<<<< HEAD
=======
Working with Collaboration on GitHub
If you are working with a team, follow these steps:
Steps for Team Members:
1. Pull the Latest Changes Before Starting Work
2. git pull origin main
3. Make Your Changes and Follow the Usual Process
4. git add .
5. git commit -m "Added new feature or fixed bug"
6. git push origin main
7. Resolve Merge Conflicts (if any)
o If you get a merge conflict, open the affected files in VS Code.
o Resolve the conflict by choosing the correct version of the code.
o After resolving:
o git add .
o git commit -m "Resolved merge conflicts"
o git push origin main
Steps for Adding Collaborators:
1. Go to Your Repository on GitHub
2. Navigate to "Settings" > "Collaborators"
3. Add Their GitHub Username
4. They Can Now Clone and Contribute to the Project

>>>>>>> 68537b2ae03045ff6750901c72bbe5eabb416815
These three Git commands are used to **track, save, and upload your changes to GitHub**. Hereâ€™s what each one does:  

### **1. `git add .`**  
âœ… **Stages all modified and new files** for commit.  
- It tells Git to track all changes in the current project directory.  

### **2. `git commit -m "Your update message"`**  
âœ… **Saves the changes** to your local Git repository.  
- The `-m "Your update message"` adds a meaningful message describing what you changed.  

<<<<<<< HEAD
### **3. `git push origin LUFFY`**  
âœ… **Uploads (pushes) the committed changes** to GitHub.  
- `origin` refers to your remote repository on GitHub.  
- `LUFFY` is the branch where you are pushing the changes.  
=======
### **3. `git push origin main`**  
âœ… **Uploads (pushes) the committed changes** to GitHub.  
- `origin` refers to your remote repository on GitHub.  
- `main` is the branch where you are pushing the changes.  
>>>>>>> 68537b2ae03045ff6750901c72bbe5eabb416815

---

### **In Simple Terms:**  
- **`git add .`** â†’ Select all changes  
- **`git commit -m "Updated feature"`** â†’ Save changes locally  
<<<<<<< HEAD
- **`git push origin LUFFY`** â†’ Upload changes to GitHub  

ðŸ’¡ **Use these commands every time you update your project!** ðŸš€

---

### **Starting Work on a Collaborative Project:**

When you start working on a collaborative project, follow these steps:

### **1. `git pull origin LUFFY`**  
âœ… **Fetches and merges changes** from the remote repository to your local repository.  
- Ensures your local repository is up-to-date with the latest changes from the LUFFY branch.

### **2. `git checkout -b your-branch-name`**  
âœ… **Creates and switches to a new branch** for your work.  
- Helps in keeping your changes isolated from the LUFFY branch until they are ready to be merged.

### **3. `git add .`**  
âœ… **Stages all modified and new files** for commit.  
- It tells Git to track all changes in the current project directory.

### **4. `git commit -m "Your update message"`**  
âœ… **Saves the changes** to your local Git repository.  
- The `-m "Your update message"` adds a meaningful message describing what you changed.

### **5. `git push origin your-branch-name`**  
âœ… **Uploads (pushes) the committed changes** to GitHub.  
- `origin` refers to your remote repository on GitHub.  
- `your-branch-name` is the branch where you are pushing the changes.

### **6. Create a Pull Request on GitHub**  
âœ… **Propose your changes** to be merged into the LUFFY branch.  
- Allows other collaborators to review and approve your changes before merging.

ðŸ’¡ **Use these commands every time you start working on a collaborative project!** ðŸš€

### **Handling Non-Fast-Forward Errors:**

If you encounter a non-fast-forward error when pushing your changes, follow these steps:

### **1. `git pull origin LUFFY`**  
âœ… **Fetches and merges changes** from the remote repository to your local repository.  
- Ensures your local repository is up-to-date with the latest changes from the LUFFY branch.

### **2. Resolve any merge conflicts if they arise**  
- If there are conflicts, Git will prompt you to resolve them. Edit the conflicting files to resolve the conflicts, then stage the resolved files using `git add`.

### **3. `git commit -m "Resolved merge conflicts"`**  
âœ… **Commits the merge conflict resolutions** to your local Git repository.  
- Adds a meaningful message describing that you resolved merge conflicts.

### **4. `git push origin LUFFY`**  
âœ… **Uploads (pushes) the committed changes** to GitHub.  
- `origin` refers to your remote repository on GitHub.  
- `LUFFY` is the branch where you are pushing the changes.

ðŸ’¡ **Use these commands to handle non-fast-forward errors!** ðŸš€

### **Handling Unrelated Histories Error:**

If you encounter an unrelated histories error when pulling changes, follow these steps:

### **1. `git pull origin LUFFY --allow-unrelated-histories`**  
âœ… **Fetches and merges changes** from the remote repository to your local repository, allowing unrelated histories.  
- Ensures your local repository is up-to-date with the latest changes from the LUFFY branch.

### **2. Resolve any merge conflicts if they arise**  
- If there are conflicts, Git will prompt you to resolve them. Edit the conflicting files to resolve the conflicts, then stage the resolved files using `git add`.

### **3. `git commit -m "Resolved merge conflicts"`**  
âœ… **Commits the merge conflict resolutions** to your local Git repository.  
- Adds a meaningful message describing that you resolved merge conflicts.

### **4. `git push origin LUFFY`**  
âœ… **Uploads (pushes) the committed changes** to GitHub.  
- `origin` refers to your remote repository on GitHub.  
- `LUFFY` is the branch where you are pushing the changes.

ðŸ’¡ **Use these commands to handle unrelated histories errors!** ðŸš€

ID : QUICKMEDS
PASSWORD : QUICKMEDS001


hafgdfkjghdsfkgklsdfg
=======
- **`git push origin main`** â†’ Upload changes to GitHub  

ðŸ’¡ **Use these commands every time you update your project!** ðŸš€




ID : QUICKMEDS
PASSWORD : QUICKMEDS001
>>>>>>> 68537b2ae03045ff6750901c72bbe5eabb416815
